#Book 1 - Up and Going

Chapter 1: Into Programming

source code - special instructions to tell computer tasks to perform.
computer language - valid format and combinations of instructions, aka syntax.

Statements ("Sentences") - a group of words, numbers, and operators that performs a specific task.

a = b * 2;a and b =  variables, which are symbolic placeholders
= and * are operators, they perform actions with the values and variables such as assignment and mathematic multiplication.

2 = literal value

Expression ("Words") - statements are made up of one or more expressions. An expression is any reference to a variable or value, or a set of variable(s) and value(s) combined with operators.a = b * 2;This statement has 4 expressions in it.

	1) 2 is a literal value expression
	2) b is a variable expression, which means to retrieve its current value
	3) b * 2 is an arithmetic expression, which means to do the multiplication
	4) a = b * 2 is an assignment expression, which means to assign the result of b*2 expression to the variable a

A general expression that stands alone is also called an expression statement.
b * 2;

call expression, the entire statement is the function call expression itself

alert ( a );

Executing a Program

Programs need to be executed also referred to as running the program

interpreter or compiler is used to translate the code you write into commands a computer can understand.

(Interpreting) some computers run the code from top to bottom
(Compiling) some computers compile the code first then run the program after

JavaScript engine compiles code first, runs it on the fly

Outputconsole.log(.â€¦); output to the user.  This statement is composed of two expressions.

log(b) is referred to as a function call.
console is an object reference, where the log(b) function is located

Input

HTML Form elements typically receive information from the user

age = prompt( "Please tell me your age:" );console.log( age );

prompt function and assign it to variable age.
display value in age to the console as output.

Operators - how we perform actions on variable and values
the * operator performs multiplication.
the = operator is used for assignment - calculate the right-hands side of the equation then put it into the variable that we specify on the left-hand side (target variable).

var keyword that declares (aka create) variables.  You should always declare a variable by a name before you use it.

Most common operators in JavaScript:

Assignment: =Math: + (addition), - (subtraction), * (multiplication), and / (division)
Compound Assignment: +=, -=. *=, and / =, combines a math operation with assignment. (a += 2) is the same as (a = a + 2 )

Increment/Decrement: ++ (increment), -- (decrement) by 1 unit
Object Property Access: . as in console.log() - Objects are values that hold or other values at specific named locations called properties.  obj.a means an object value called obj with a property of the name a.  obj.a is sort of like an address. obj (street) + .a(number)
Equality: == (loose-equals), === (strict equals), != (loose not equals), !== (strict not equals)

Comparison: < (less than), > (greater than), <= (less than or loose equals), >= (greater than or loose equals)Logical: && (and) || (or) as in || that selects either a or bThese particular operators are used to express compound conditionals, like if either a or b is true.

Values & Types

Types - different representations for values.
When you do math, you want a number.
String is one or more characters, words, sentences.
Decisions is boolean (true or false).
Values that are included directly in the source code are called literals.

Other value types include: arrays, objects, and functions.

Converting Between Types

Converting between value types is called coercion.
Example: have a number and need to print it onscreen, coercion takes place from the number value type to the string type.

Number(); - explicitly coerces string to number type.

== loose operators will implicitly coerce strings to numbers.
"99.99" == 99 is true. (implicit coercion).

Code Comments 

Bits of text in your program that are inserted purely to explain things.

Best Practices:* code without comments is suboptimal
*too many comments is poorly written code
*comments should explain why, not what.

Single-line // and multiline /* */

Variables 

Variable - symbolic container that holds values, value can change over time.

Usually declare a variable to hold a specific type of value, such as Number or String, known as static typing or type enforcement.

Weak typing, or dynamic typing - emphasis on the value itself rather than the variable declaration.  This allows a single variable to represent a value no matter what type form that value may have.  More flexible.  JavaScript utilizes this method.

All output is of the string value type.
Blue = numbers that were implicitly coerced to string data type.
Black = no coercion occurred during the console.log(); the value type was previously coerced.

Primary purpose of variables: managing program state.

State is tracking the changes to values as your program runs.
Constants = centralizing value setting.  When you intend for the value NOT to change throughout the program.  Usually capitalized at the top of the program with _ between multiple words.

Newest version of JavaScript is called ES6;

Declare constants with:  const

Blocks ("paragraphs")

Often need to group a series of statements together, which we often call a block.  Typically attached to a conditional "if" statement.

Conditionals("decisions")

Conditionals are decision points in our programs.  Most common one being the if statement.

If the condition is true, then do the follow { }else clause occurs if the if condition is not true.if statements expect boolean (true/false, yes/no, on/off) discrete conditions.  If you pass conditionals that is not boolean, JS will coerce it to the boolean type.switch is the shorthand for if/else
specific values that are coerced to false in boolean are called "falsy" some examples include values like 0 or "".specific values that are coerced to true in boolean are called "truthy". Some examples include values like 99.99 or "free".

Loops

Repeating a set of actions until a condition fails, repeating only while the condition holds is a loop.

loop  includes test condition + block {}, each execution is called an iteration.

while (boolean condition) { action;};ordo {action;
} while (boolean condition);

while (true) loop runs forever because true = true

for loops - intended purpose of counting a certain set of numbers

for loops are made of 3 clauses:a) initialization clause (var i=0)
b) conditional test clause ( I <= 9)
c) update clause (i  = i + 1 )

Functions ("little programs")

function is generally a named section of code that can "called" by name, and the code inside it will run each time.

functions can take arguments/parameters/values that you pass it:
function printAmount(amt) {
action with amt variable within;
}

functions can be stored in variables:

amount = printAmount();
console.log(amount);        // function will be called

Functions are often used for code that you plan to call multiple times, but they can be useful to organize related bits of code into named collection, even if you use them once.

Scope("page that you write on")also known lexical scope, scope is the "space" or "area" a particular piece of code has meaning.  Collection of variables as well as rules for how those variables are accessed by name.  Only code inside a specific function can access scoped variables.  

Same variable name can appear in different functions because the two functions are in two different scopes.Scope can be nested inside another scope.  Innermost scope can access variables within its own scope as well as from the scope it is nested within.


Chapter 2: Into Programming

Values & Types 

JS has typed values not typed (static variables).

Built-in types are:
string
number
boolean
null and undefined
object
symbol

typeof operator examines the value and displays what type it is.

type of a is asking for the type that the VALUE a is holding, not a itself.

Objects 

objects - compound value where you can set properties (named locations) that each hold their own values of any type.





                = property (named location) holding value type:  ie: property name = A, value = "hello world"

Objects can be accessed by:dot notation - object.a   (easiest to read and preferred)bracket notation - object["a"] (good to use when properties have special names)arrays and functions - should be thought of as subtypes -- specialized versions of the object type.

Arrays - is an object that holds values (any type) not particularly in named properties/keys, but rather in numerically indexed positions.
          
accessed by - arr[0];Since arrays are special objects, they can also have properties, including the automatically updated length property.

Functions - object subtype that is called.Functions have object properties, but are only referenced/used in limited cases.

Built-In Type Methods

A type method is a Native (object wrapper form), that pairs with the object that you reference it as a property.  The type method "boxes" the value  and then defines the said object based on the prototype.
Examples of Object Wrapper Forms:Number ObjectString ObjectBoolean Object

Comparing Values
Two main types of value comparison: equality or inequality.  The result of any comparison is a strictly boolean value (true or false).

Coercion - JS changing the value type.  implicit and explicit.explicit - obvious from the code.
implicit - non-obvious side effect of some other operation.
explicit coercion example:

var a = "42";
var b = Number( a );
a;				// "42"
b;				// 42 -- the number!

implicit coercion example:

var a = "42";
var b = a * 1;	// "42" implicitly coerced to 42 here
a;				// "42"
b;				// 42 -- the number!


Truthy & Falsy

when a non-boolean value is coerced to a boolean.

The specific list of "falsy" values in JavaScript is as follows:
	â€¢ ""Â (empty string)
	â€¢ 0,Â -0,Â NaNÂ (invalidÂ number)
	â€¢ null,Â undefined
	â€¢ false


Any value that's not on this "falsy" list is "truthy." Here are some examples of those:
	â€¢ "hello"
	â€¢ 42
	â€¢ true
	â€¢ [ ],Â [ 1, "2", 3 ]Â (arrays)
	â€¢ { },Â { a: 42 }Â (objects)
	â€¢ function foo() { .. }Â (functions)

Equality

Four equality operators: ==, ===, !=, !===

== checks for equality with coercion allowed.
=== checks for equality without coercion allowed. "strict equality"

To boil down a whole lot of details to a few simple takeaways, and help you know whether to useÂ ==Â orÂ ===Â in various situations, here are my simple rules:
	â€¢ If either value (aka side) in a comparison could be theÂ trueÂ orÂ falseÂ value, avoidÂ ==Â and useÂ ===.
	â€¢ If either value in a comparison could be of these specific values (0,Â "", orÂ []Â -- empty array), avoidÂ ==Â and useÂ ===.
	â€¢ InÂ allÂ other cases, you're safe to useÂ ==. Not only is it safe, but in many cases it simplifies your code in a way that improves readability.

== and === for non-primitive values, such as: objects (function and array) will simply check whether the references match, not anything about the underlying values.

arrays are coerced to strings by default so when compared to another string, if both are equal then the boolean value is true.an array is compared to another array, the reference is what is being tested, not the underlying values (contents coerced to string type).

inequality  The <, >, <=, and >= operators are used for inequality, referred to as "relational comparison"typically used to compare number values.

When a string is compared to a number, the string is coerced to a Number Type.
When a string is compared to another string, the comparison is done lexicographically (alphabetically like a dictionary).

Value Types that cannot be coerced to a number, such as "foo", coerce to the NaN type.  Will yield the false boolean value for all comparisons.

NaN is defined as neither greater-than nor less-than a number.

Variables

variable names (including function names) must be valid identifiers: must start with a-z, A-Z, $, or _.

reserved words (cannot use in variable names) = for, in, if, null, true, false.

Function Scopes

Use the var keyword to declare a variable that will belong to the current function scope.

Hoisting - where a var appears inside a scope, that declaration is taken to belong to the entire scope and accessible everywhere throughout.  "Hoisted" to the top of the enclosing scope.Nested Scopes

When you declare a variable, it is available anywhere in that scope, as well as any lower/inner scopes.

Variables defined within a nested scope cannot be accessed by any scopes outer to it.

Not declaring a variable in a scope; ie.: i = 2; will result in auto global variable.  Always formally declare your variables.

let - keyword allows you to declare variables for individual block pairs { . . }.declaring variables at the individual block level { .. } will declare those variables for the entire function.declaring variables at the function level ( .. ) will declare those variables for the nested function.In order to limit the scope of individual blocks nested within a function, you must use the let keyword.Conditionals if/else statements

switch statements  - shorthand for if statements(in switch statements use the "==" & "===" relational operator. "=" is the assignment operator.
use break; to  stop subsequent cases from executing.

traditionally used in this format:

switch (a) {
	case 2:
		// do something
		break;
	case 10:
		// do another thing
		break;
	case 42:
		// do yet another thing
		break;
	default:
		// fallback to here
}

This switch statement uses a single value as a parameter and references a specific case or outcome based on the case value.


switch (true) {
	case ( a < 1 ):
		// do something
		break;
	case ( a = 1 ):
		// do another thing
		break;
	case ( a > 1 ):
		// do yet another thing
		break;
	default:
		// fallback to here
}

This switch statement allows for conditionals in each individual case.conditional operator / ternary operator - concise form of a single if/else statement.

var a = 42;
var b = (a > 41) ? "hello" : "world";
// similar to:
// if (a > 41) {
//    b = "hello";
// }
// else {
//    b = "world";
// }

Strict Mode

"use strict";a mode that tightens the rules for certain behaviors in JS.  Generally used to keep the code safer.

Can be applied to individual function or an entire file.

One feature of strict mode disallows the implicit auto-global variable declaration.  Must declare all variables.

Benefits of using strict mode:safer codemore optimizable
future direction of the language

Functions As Values

function foo() {
	// ..
}

foo is basically a variable in the outer enclosing scope,
given reference to the function being declared, the function { .. } itself is a value.

Therefore, functions can be passed to or returned from other functions.

Functions should be thought as an expression, or value.

var x = function bar(){
	// ..
};

Example of a named function expression being assigned to the x variable.

Immediately Invoked Function Expressions (IIFEs)

A way to immediately execute a declared function.(function IIFE() { â€¦ } ) ();( function foo () { // do something} ) ();Put braces around the function, then execution braces "()" in front of the closed function.Function Reference is calling/referencing the function declaration and definition.foo = function reference     () = executing the function reference.

































