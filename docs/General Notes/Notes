function Top() {
        var a = 1;

        function Middle() {
            var b = 2;
            
            function Bottom() {
                var c = 3;
                console.log("This occurs first");
                }
            
            Bottom();
            console.log("This occurs second");

        }
        Middle();
        console.log("This occurs last");
}


Top();

Code runs top to down. Top(); runs first, definition or code inside Top(){} runs, then Middle(); followed by Bottom(); "PORTALING".

        
let keeps the variables scope to the {} - will not affect the scope of variables above it.

var keeps the variable's scope to the ENTIRE function, no matter how far nested it is.

----------------------------------------------------------------------------------------------------------------------------------------

switch (a) {
	case 2:
		// do something
		break;
	case 10:
		// do another thing
		break;
	case 42:
		// do yet another thing
		break;
	default:
		// fallback to here
}

CASES must be in quotes like the following example:

switch (a) {
	case "2":
		// do something
		break;
	case "10":
		// do another thing
		break;
	case "42":
		// do yet another thing
		break;
	default:
		// fallback to here
}
--------------------------------------------------------------------------------------------------------------------------------------

=  no coercion; value type stays the same.
== implicit coercion, value type changes.
=== explicit coercion, value type changes.

---------------------------------------------------------------------------------------------------------------------------------------

adding () to an expressions excecutes it

---------------------------------------------------------------------------------------------------------------------------------------

A function as a value and calling Objects within the function.

function Test() {

    function y(z,o) {
        zvar = z;
        ovar = o;
    console.log("zvar value = " + zvar);
    console.log("ovar value = " + ovar);

    }

    var Object = {
        x: y
    };

    return Object;
}

var Ryan = Test();
Ryan.x(1,2);

---------------------------------------------------------------------------------------------------------------------------------------

If you want to pass multiple values from function to another function, you must return the first function's values in the form of an
array.

Then you will need to pass the array values so that the following function receives the array as individual parameters/arguments.

You need to use this code in order to achieve this: 

myFunction.apply(window, (function()));

---------------------------------------------------------------------------------------------------------------------------------------

Scope - rules for variables: how and when they are accessed..

---------------------------------------------------------------------------------------------------------------------------------------

Declarations are hoised to the top of the scope.

Assignment or any other expressions are NOT hoisted to the top of the scope.

---------------------------------------------------------------------------------------------------------------------------------------

Lexical Scope - What JS utilizes.  Scope is defined where the function was defined.  AUTHOR TIME.  Where it is written.

---------------------------------------------------------------------------------------------------------------------------------------
 
 +prompt converts string type input to number type and stores it in a variable..
 
 ---------------------------------------------------------------------------------------------------------------------------------------

push(); // adds a value to the end of an array.
pop(); // removes a value from the end of an array.
shift(); // removes a value to the beginning of an array.
unshift(); // adds a value to the beginning of an array.

---------------------------------------------------------------------------------------------------------------------------------------

functions create scope

---------------------------------------------------------------------------------------------------------------------------------------
