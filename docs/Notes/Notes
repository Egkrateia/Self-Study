function Top() {
        var a = 1;

        function Middle() {
            var b = 2;
            
            function Bottom() {
                var c = 3;
                console.log("This occurs first");
                }
            
            Bottom();
            console.log("This occurs second");

        }
        Middle();
        console.log("This occurs last");
}

Top();

Code runs top to down. Top(); runs first, definition or code inside Top(){} runs, then Middle();, followed by Bottom(); "PORTALING"

        
let keeps the variables scope to the {} - won't affect the scope of variables above it.

var keeps the variable's scope to the ENTIRE function, no matter how far nested it is.

----------------------------------------------------------------------------------------------------------------------------------------

```switch (a) {
	case 2:
		// do something
		break;
	case 10:
		// do another thing
		break;
	case 42:
		// do yet another thing
		break;
	default:
		// fallback to here
}```

CASES must be in quotes like the following example:

switch (a) {
	case "2":
		// do something
		break;
	case "10":
		// do another thing
		break;
	case "42":
		// do yet another thing
		break;
	default:
		// fallback to here
}
--------------------------------------------------------------------------------------------------------------------------------------

=  no coercion; value type stays the same.
== implicit coercion, value type changes.
=== explicit coercion, value type changes.
